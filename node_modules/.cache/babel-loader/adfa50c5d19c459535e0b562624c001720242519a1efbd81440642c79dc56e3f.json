{"ast":null,"code":"var _jsxFileName = \"/Users/areum/Desktop/basic\\u1100\\u116A\\u110C\\u1166/4-2/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = [{\n  id: nanoid(),\n  name: \"멋진 바지\",\n  price: 20000,\n  options: [28, 30, 32],\n  likes: 100\n}, {\n  id: nanoid(),\n  name: \"멋진 셔츠\",\n  price: 10000,\n  options: [\"small\", \"medium\", \"large\"],\n  likes: 200\n}, {\n  id: nanoid(),\n  name: \"멋진 신발\",\n  price: 30000,\n  options: [230, 240, 250, 260, 270],\n  likes: 300\n}];\nconst products = createSlice({\n  name: \"상품들\",\n  initialState: initialState,\n  reducers: {\n    sortByPrice: state => {\n      state.sort((a, b) => a.price - b.price);\n    },\n    reset: state => initialState\n  }\n});\nexport const {\n  sortByPrice,\n  reset\n} = products.actions;\n\n// 장바구니 redux\n// 다른 상태가 필요하기 때문에 redux 하나 더\n\nconst cart = createSlice({\n  name: \"장바구니\",\n  initialState: [],\n  reducers: {\n    추가하기: (state, action) => {\n      state.push(action.payload); // 빈 배열이었던 state에 데이터가 들어감\n    }\n  }\n});\nexport const {\n  추가하기\n} = cart.actions;\n\n// const store = configureStore({\n//   reducer: {\n//     상품들: products.reducer,\n//     카트: cart.reducer,\n//   },\n// });\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 70,\n  columnNumber: 3\n}, this));\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","createSlice","nanoid","Provider","store","jsxDEV","_jsxDEV","initialState","id","name","price","options","likes","products","reducers","sortByPrice","state","sort","a","b","reset","actions","cart","추가하기","action","push","payload","root","createRoot","document","getElementById","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/areum/Desktop/basic과제/4-2/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/config\";\n\nconst initialState = [\n  {\n    id: nanoid(),\n    name: \"멋진 바지\",\n    price: 20000,\n    options: [28, 30, 32],\n    likes: 100,\n  },\n  {\n    id: nanoid(),\n    name: \"멋진 셔츠\",\n    price: 10000,\n    options: [\"small\", \"medium\", \"large\"],\n    likes: 200,\n  },\n  {\n    id: nanoid(),\n    name: \"멋진 신발\",\n    price: 30000,\n    options: [230, 240, 250, 260, 270],\n    likes: 300,\n  },\n];\n\nconst products = createSlice({\n  name: \"상품들\",\n  initialState: initialState,\n  reducers: {\n    sortByPrice: (state) => {\n      state.sort((a, b) => a.price - b.price);\n    },\n    reset: (state) => initialState,\n  },\n});\nexport const { sortByPrice, reset } = products.actions;\n\n// 장바구니 redux\n// 다른 상태가 필요하기 때문에 redux 하나 더\n\nconst cart = createSlice({\n  name: \"장바구니\",\n  initialState: [],\n  reducers: {\n    추가하기: (state, action) => {\n      state.push(action.payload); // 빈 배열이었던 state에 데이터가 들어감\n    },\n  },\n});\n\nexport const { 추가하기 } = cart.actions;\n\n// const store = configureStore({\n//   reducer: {\n//     상품들: products.reducer,\n//     카트: cart.reducer,\n//   },\n// });\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAEN,MAAM,CAAC,CAAC;EACZO,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,KAAK;EACZC,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACrBC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAEN,MAAM,CAAC,CAAC;EACZO,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,KAAK;EACZC,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;EACrCC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAEN,MAAM,CAAC,CAAC;EACZO,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,KAAK;EACZC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAClCC,KAAK,EAAE;AACT,CAAC,CACF;AAED,MAAMC,QAAQ,GAAGZ,WAAW,CAAC;EAC3BQ,IAAI,EAAE,KAAK;EACXF,YAAY,EAAEA,YAAY;EAC1BO,QAAQ,EAAE;IACRC,WAAW,EAAGC,KAAK,IAAK;MACtBA,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACR,KAAK,GAAGS,CAAC,CAACT,KAAK,CAAC;IACzC,CAAC;IACDU,KAAK,EAAGJ,KAAK,IAAKT;EACpB;AACF,CAAC,CAAC;AACF,OAAO,MAAM;EAAEQ,WAAW;EAAEK;AAAM,CAAC,GAAGP,QAAQ,CAACQ,OAAO;;AAEtD;AACA;;AAEA,MAAMC,IAAI,GAAGrB,WAAW,CAAC;EACvBQ,IAAI,EAAE,MAAM;EACZF,YAAY,EAAE,EAAE;EAChBO,QAAQ,EAAE;IACRS,IAAI,EAAEA,CAACP,KAAK,EAAEQ,MAAM,KAAK;MACvBR,KAAK,CAACS,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH;AAAK,CAAC,GAAGD,IAAI,CAACD,OAAO;;AAEpC;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMM,IAAI,GAAG7B,QAAQ,CAAC8B,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTzB,OAAA,CAACH,QAAQ;EAACC,KAAK,EAAEA,KAAM;EAAA4B,QAAA,eACrB1B,OAAA,CAACP,GAAG;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACC,CACZ,CAAC;AAEDpC,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}